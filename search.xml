<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>开窗函数</title>
    <url>/2021/06/23/%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="开窗函数-分析函数：over"><a href="#开窗函数-分析函数：over" class="headerlink" title="开窗函数/分析函数：over()"></a>开窗函数/分析函数：over()</h3><p>开窗函数也叫分析函数，有两类：一类是聚合开窗函数，一类是排序开窗函数。</p>
<h4 id="聚合开窗函数"><a href="#聚合开窗函数" class="headerlink" title="聚合开窗函数"></a>聚合开窗函数</h4><p>聚合函数(列) OVER (选项)，这里的选项可以是PARTITION BY子句，但不可是ORDER BY子句</p>
<p> OVER 关键字表示把聚合函数当成聚合开窗函数而不是聚合函数。SQL 标准允许将所有聚合函数用做聚合开窗函数。</p>
<p>在上边的例子中，开窗函数COUNT(*) OVER()对于查询结果的每一行都返回所有符合条件的行的条数。OVER关键字后的括号中还经常添加选项用以改变进行聚合运算的窗口范围。如果OVER关键字后的括号中的选项为空，则开窗函数会对结果集中的所有行进行聚合运算.</p>
<h4 id="排序开窗函数"><a href="#排序开窗函数" class="headerlink" title="排序开窗函数"></a>排序开窗函数</h4><p>排序函数(列) OVER(选项)，这里的选项可以是ORDER BY子句，也可以是　OVER（PARTITION BY子句　ORDER BY子句），但不可以是PARTITION BY子句.开窗函数的OVER关键字后括号中的可以使用PARTITION BY 子句来定义行的分区来供进行聚合计算。与GROUP BY 子句不同，PARTITION BY 子句创建的分区是独立于结果集的，创建的分区只是供进行聚合计算的，而且不同的开窗函数所创建的分区也不互相影响。    </p>
<h6 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `test_row_number_over` (</span><br><span class="line">	`id` VARCHAR ( 10 ) CHARACTER </span><br><span class="line">	SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT &#x27;主键&#x27;,</span><br><span class="line">	`name` VARCHAR ( 10 ) CHARACTER </span><br><span class="line">	SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT &#x27;姓名&#x27;,</span><br><span class="line">	`age` VARCHAR ( 10 ) CHARACTER </span><br><span class="line">	SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT &#x27;年龄&#x27;,</span><br><span class="line">`salary` INT DEFAULT NULL COMMENT &#x27;工资&#x27; </span><br><span class="line">) ENGINE = INNODB DEFAULT CHARSET = utf8mb3 COMMENT = &#x27;练习开窗函数&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/23/%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/image-20210528145308367.png" alt="image-20210528145308367"></p>
<h5 id="row-number-over"><a href="#row-number-over" class="headerlink" title="row_number() over()"></a>row_number() over()</h5><p>对相等的值不进行区分，相等的值对应的排名相同，序号从1到n连续。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	id,</span><br><span class="line">	`name`,</span><br><span class="line">	age,</span><br><span class="line">	salary,</span><br><span class="line">	row_number ( ) over ( ORDER BY salary DESC ) rn </span><br><span class="line">FROM</span><br><span class="line">	TEST_ROW_NUMBER_OVER t;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/23/%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/image-20210528145415622.png" alt="image-20210528145415622"></p>
<h5 id="rank-over"><a href="#rank-over" class="headerlink" title="rank() over()"></a>rank() over()</h5><p>相等的值排名相同，但若有相等的值，则序号从1到n不连续。如果有两个人都排在第3名，则没有第4名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	id,</span><br><span class="line">	`name`,</span><br><span class="line">	age,</span><br><span class="line">	salary,</span><br><span class="line">	row_number ( ) over ( ORDER BY salary DESC ) rn </span><br><span class="line">FROM</span><br><span class="line">	TEST_ROW_NUMBER_OVER t;</span><br></pre></td></tr></table></figure>



<p><img src="/2021/06/23/%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/image-20210528145331818.png" alt="image-20210528145331818"></p>
<h5 id="dense-rank-over"><a href="#dense-rank-over" class="headerlink" title="dense_rank() over()"></a>dense_rank() over()</h5><p>对相等的值排名相同，但序号从1到n连续。如果有两个人都排在第一名，则排在第2名（假设仅有1个第二名）的人是第3个人。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	id,</span><br><span class="line">	`name`,</span><br><span class="line">	age,</span><br><span class="line">	salary,</span><br><span class="line">	dense_rank ( ) over ( ORDER BY salary DESC ) rn </span><br><span class="line">FROM</span><br><span class="line">	TEST_ROW_NUMBER_OVER t;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/23/%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/image-20210528145522876.png" alt="image-20210528145522876"></p>
<h5 id="ntile-n-over"><a href="#ntile-n-over" class="headerlink" title="ntile(n) over()"></a>ntile(n) over()</h5><p>可以看作是把有序的数据集合平均分配到指定的数量n的桶中,将桶号分配给每一行，排序对应的数字为桶号。如果不能平均分配，则较小桶号的桶分配额外的行，并且各个桶中能放的数据条数最多相差1。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	id,</span><br><span class="line">	`name`,</span><br><span class="line">	age,</span><br><span class="line">	salary,</span><br><span class="line">	ntile ( 4 ) over ( ORDER BY salary DESC ) rn </span><br><span class="line">FROM</span><br><span class="line">	TEST_ROW_NUMBER_OVER t;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/23/%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/image-20210528150835008.png" alt="image-20210528150835008"></p>
<h3 id="开窗函数和聚合函数的区别"><a href="#开窗函数和聚合函数的区别" class="headerlink" title="开窗函数和聚合函数的区别"></a>开窗函数和聚合函数的区别</h3><p>（1）SQL 标准允许将所有聚合函数用作开窗函数，用OVER 关键字区分开窗函数和聚合函数。</p>
<p>（2）聚合函数每组只返回一个值，开窗函数每组可返回多个值。</p>
]]></content>
      <tags>
        <tag>MySQL,SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA基础知识点</title>
    <url>/2021/06/22/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h3 id="i-和-i"><a href="#i-和-i" class="headerlink" title="i++和++i"></a>i++和++i</h3><h4 id="i-和-i的区别"><a href="#i-和-i的区别" class="headerlink" title="i++和++i的区别"></a>i++和++i的区别</h4><p>i++ 即后加加，原理是：先自增，然后返回自增之前的值。</p>
<p>++i 即前加加，原理是：先自增，然后返回自增之后的值。</p>
<p><font color="#FF0000">重点：不论是前++还是后++，都有个共同点是先自增。</font></p>
<p>用代码模拟i++的原理，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> temp = i;</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> temp;  </span><br></pre></td></tr></table></figure>

<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><h5 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">i = i++; </span><br><span class="line">System.out.println(<span class="string">&quot;i = &quot;</span> + i); </span><br></pre></td></tr></table></figure>
<p><a href="#%E7%A4%BA%E4%BE%8B1">答案</a></p>
<h5 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>; </span><br><span class="line"><span class="keyword">int</span> b = (<span class="number">3</span> * a++) + a;</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>
<p><a href="#%E7%A4%BA%E4%BE%8B2">答案</a></p>
<h5 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>; </span><br><span class="line"><span class="keyword">int</span> b = a + (<span class="number">3</span> * a++);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>
<p><a href="#%E7%A4%BA%E4%BE%8B3">答案</a></p>
<h5 id="示例四"><a href="#示例四" class="headerlink" title="示例四"></a>示例四</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k = i++ + ++i + ++j + j++; </span><br><span class="line">System.out.println(k);</span><br></pre></td></tr></table></figure>
<p><a href="#%E7%A4%BA%E4%BE%8B4">答案</a></p>
<h5 id="示例五"><a href="#示例五" class="headerlink" title="示例五"></a>示例五</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">a = a++;</span><br><span class="line">b = a++;</span><br><span class="line">System.out.println(<span class="string">&quot;a = &quot;</span> + a + <span class="string">&quot;, b = &quot;</span> + b);</span><br></pre></td></tr></table></figure>
<p><a href="#%E7%A4%BA%E4%BE%8B5">答案</a></p>
<h5 id="示例答案"><a href="#示例答案" class="headerlink" title="示例答案"></a>示例答案</h5><h6 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h6><p>0</p>
<h6 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h6><p>9</p>
<h6 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h6><p>8</p>
<h6 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h6><p>8</p>
<h6 id="示例5"><a href="#示例5" class="headerlink" title="示例5"></a>示例5</h6><p>a = 1, b = 0</p>
]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
</search>
